FROM node:14.11.0

ARG NODE_ENV
ARG IDENTITY_HEADER
ARG CRYPTO_SECRET
ARG TSI_DATA_HOST
ARG TSI_DATA_PORT
ARG TSI_DATA_DOCKER_HOST
ARG TSI_MYSQL_HOST
ARG TSI_MYSQL_PORT
ARG TSI_MYSQL_EXTERNAL_PORT
ARG TSI_MYSQL_USER
ARG TSI_MYSQL_DATABASE
ARG TSI_MYSQL_PASSWORD
ARG TSI_MYSQL_ROOT_PASSWORD

ENV NODE_ENV=${NODE_ENV}
ENV IDENTITY_HEADER=${IDENTITY_HEADER}
ENV CRYPTO_SECRET=${CRYPTO_SECRET}
ENV TSI_DATA_HOST=${TSI_DATA_HOST}
ENV TSI_DATA_PORT=${TSI_DATA_PORT}
ENV TSI_DATA_DOCKER_HOST=${TSI_DATA_DOCKER_HOST}
ENV TSI_MYSQL_HOST=${TSI_MYSQL_HOST}
ENV TSI_MYSQL_PORT=${TSI_MYSQL_PORT}
ENV TSI_MYSQL_EXTERNAL_PORT=${TSI_MYSQL_EXTERNAL_PORT}
ENV TSI_MYSQL_USER=${TSI_MYSQL_USER}
ENV TSI_MYSQL_DATABASE=${TSI_MYSQL_DATABASE}
ENV TSI_MYSQL_PASSWORD=${TSI_MYSQL_PASSWORD}
ENV TSI_MYSQL_ROOT_PASSWORD=${TSI_MYSQL_ROOT_PASSWORD}
ENV DOCKERIZE_VERSION v0.6.0

WORKDIR /usr/app
COPY package*.json ./
RUN npm install --silent --production
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz
COPY ./ ./
RUN npm run build
#CMD dockerize -wait tcp://127.0.0.1:$TSI_MYSQL_PORT -timeout 60m npm run db-migrate && npm start
CMD dockerize -wait tcp://$TSI_MYSQL_HOST:$TSI_MYSQL_PORT -timeout 60m npm run db-migrate && npm start
#CMD dockerize -wait tcp://tsi-service-mysql-stage:$TSI_MYSQL_PORT -timeout 60m npm run db-migrate && npm start

